name: Build Debug Android App and Release

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'main' # Or your default branch like 'develop'

  # Triggers the workflow on push events to the specified branches
  push:
    branches:
      - main  # Or your default branch
      # - develop # Add other branches if needed

jobs:
  build-and-release-debug:
    name: Build and Release Debug APK
    runs-on: ubuntu-latest

    # These permissions are needed to create releases and tags
    permissions:
      contents: write # Allows creating releases/tags

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use the branch specified in manual dispatch, or the branch that triggered the push
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # Adoptium Temurin is a popular distribution
          cache: 'gradle' # Caches Gradle dependencies for faster builds

      # Note: The 'ubuntu-latest' runner usually comes with a functional Android SDK.
      # If you encounter issues related to specific SDK components (e.g., NDK, CMake, specific build-tools version),
      # you can uncomment and configure the following step:
      # - name: Set up Android SDK
      #   uses: android-actions/setup-android@v3
      #   with:
      #     api-level: 34 # Example: target API level for SDK manager
      #     build-tools: "34.0.0" # Example: specific build tools version
      #     # ndk-version: "25.2.9519653" # Example: NDK version if your project uses NDK
      #     # cmake-version: "3.22.1" # Example: CMake version if your project uses CMake

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build debug APK
        # The 'assembleDebug' task automatically builds and signs the APK with the debug key.
        # Using --stacktrace provides more detailed logs if the build fails.
        run: ./gradlew assembleDebug --stacktrace

      - name: Find Debug APK
        id: find_apk
        run: |
          # Common path for a single-module app (where the app module is named 'app')
          APK_PATH_APP_MODULE="app/build/outputs/apk/debug/app-debug.apk"

          # More generic way to find any -debug.apk if the module name is different or structure varies
          # This searches for any APK ending with "-debug.apk" in any "build/outputs/apk/debug/" directory
          FOUND_APK=$(find . -path "*/build/outputs/apk/debug/*-debug.apk" -type f | head -n 1)

          if [ -f "$APK_PATH_APP_MODULE" ]; then
            echo "Using APK at default path: $APK_PATH_APP_MODULE"
            echo "apk_path=$APK_PATH_APP_MODULE" >> $GITHUB_OUTPUT
            echo "apk_name=$(basename $APK_PATH_APP_MODULE)" >> $GITHUB_OUTPUT
          elif [ -n "$FOUND_APK" ]; then
            echo "Found APK using find command: $FOUND_APK"
            echo "apk_path=$FOUND_APK" >> $GITHUB_OUTPUT
            echo "apk_name=$(basename $FOUND_APK)" >> $GITHUB_OUTPUT
          else
            echo "Error: Debug APK not found."
            echo "Searched for default path: $APK_PATH_APP_MODULE"
            echo "Also searched using: find . -path \"*/build/outputs/apk/debug/*-debug.apk\" -type f"
            echo "Listing contents of typical output directories:"
            echo "--- Contents of app/build/outputs/apk/debug/ (if exists) ---"
            ls -R app/build/outputs/apk/debug/ || echo "Directory app/build/outputs/apk/debug/ not found."
            echo "--- Results of find . -path \"*/build/outputs/apk/debug/*\" ---"
            find . -path "*/build/outputs/apk/debug/*" || echo "No files found in common output locations."
            exit 1
          fi
        shell: bash

      - name: Create Release Tag, Name and Body
        id: release_info
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S) # Format: YYYYMMDD-HHMMSS

          TAG_NAME="debug-build/${TIMESTAMP}-${SHORT_SHA}"
          RELEASE_NAME="Debug Build (${steps.find_apk.outputs.apk_name}) - ${TIMESTAMP}"
          
          # Construct the release body using a HERE document for multiline content
          RELEASE_BODY=$(cat <<EOF
          Automated debug build.

          **APK File:** \`${{ steps.find_apk.outputs.apk_name }}\`
          **Commit:** [${SHORT_SHA}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          **Triggered by:** \`${{ github.event_name }}\`
          **Branch/Ref:** \`${{ github.ref_name }}\`
          **Workflow Run:** [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          This is a debug build and is not intended for production use.
          It is signed with the standard Android debug key.
          EOF
          )
          
          # Output variables for the next step
          # Using GITHUB_OUTPUT with delimiter for multiline strings
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "${RELEASE_BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          # This token is automatically provided by GitHub Actions
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: ${{ steps.release_info.outputs.release_name }}
          body: ${{ steps.release_info.outputs.release_body }}
          draft: false       # Set to true if you want to create a draft release first
          prerelease: true   # Marks the release as a pre-release, suitable for debug builds
          files: ${{ steps.find_apk.outputs.apk_path }} # Path to the APK file to upload
